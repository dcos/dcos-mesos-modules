package mesos.modules.overlay;


message BridgeInfo {
  // The device name for the bridge.
  required string name = 1;

  // IP in CIDR format allocated to this bridge. The bridge will act
  // as a gateway for all containers associated with it.
  optional string ip = 2;

  // IPv6 in CIDR format
  optional string ip6 = 3;
}


message VxLANInfo {
  required uint32 vni = 1;
  required string vtep_name = 2;
  required string vtep_ip = 3;
  required string vtep_mac = 4;
  optional string vtep_ip6 = 5;
}


// The different backends that can be used to tunnel ingress and
// egress traffic.
message BackendInfo {
  optional VxLANInfo vxlan = 1;
}


// This message describes a particular overlay network.  There can be
// multiple overlay networks that exist simultaneously.
message OverlayInfo {
  // Canonical name identifying the overlay network.
  required string name = 1;

  // The subnet associated with this overlay network.
  optional string subnet = 2;

  // The prefix length used to carve out subnets for Agents, from the
  // subnet assigned to this overlay.
  optional uint32 prefix = 3;

  // The IPv6 subnet associated with this overlay network.
  optional string subnet6 = 4;

  // The prefix length used to carve out IPv6 subnets for Agents
  optional uint32 prefix6 = 5;
}


// This message defines the properties of an overlay network that
// exist on an Agent.
message AgentOverlayInfo {
  // The overlay to which this instance belongs.
  required OverlayInfo info = 1;

  // The subnet of the overlay that is associated with this Agent.
  // NOTE: This subnet should be a subset of the `overlay` subnet.
  optional string subnet = 2;

  // These bridges will be used to attach Mesos and Docker containers
  // to the overlay instance on this Agent.
  optional BridgeInfo mesos_bridge = 3;
  optional BridgeInfo docker_bridge = 4;

  // The backend used to tunnel ingress and egress traffic.
  required BackendInfo backend = 5;

  message State {
    enum Status {
      STATUS_INVALID = 0;
      STATUS_OK = 1;
      STATUS_FAILED = 2;
      STATUS_CONFIGURING = 3;
    }

    optional Status status = 1 [default = STATUS_INVALID];
    optional string error = 2;
  }

  optional State state = 6;

  //IPv6 subnet
  optional string subnet6 = 7;
}


message AgentInfo {
  // The IP address of the agent.
  required string ip = 1;

  // The overlay networks that exist on this agent.
  repeated AgentOverlayInfo overlays = 2;
}


message State {
  // The overlay networks that exist in the cluster.
  optional NetworkConfig network = 1;

  // Agent that run an instance of the overlay networks. On each
  // Agent there can be at most one instance of each overlay network.
  repeated AgentInfo agents = 2;
}


// Message describing the parameters required to configure a network on
// a Mesos cluster. A network can consist of multiple overlay networks
// with non-overlapping address spaces.
message NetworkConfig {
  // The subnet used to allocate IP address to VTEPs on Agents.
  required string vtep_subnet = 1;

  // The first 24-bits of VTEP MAC address. When the master assigns
  // VTEPs to Agents it will choose a different lower 24-bit address
  // for each Agent.
  required string vtep_mac_oui = 2;

  // The overlay networks that need to be configured on the DC/OS
  // cluster.
  repeated OverlayInfo overlays = 3;

  // IPv6 subnet for vtep
  optional string vtep_subnet6 = 4;
}
